pragma solidity ^0.8.0;
pragma abicoder v2;



// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)
/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)
// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.
/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: UNLICENSED
interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}


/**
 * @dev {ERC721} token, including:
 */
interface IPiratesKingBase {
    struct PKChest {
        uint256 tokenId;
        string tokenURI;
        address payable mintedBy;
        address payable currentOwner;
        address payable previousOwner;
        uint256 price;
        uint256 numberOfTransfers;
        bool forSale;
        bool isOpened;
        string data;
        uint8 cType; // chest token uri
    }
}


interface IPiratesKingChest is IPiratesKingBase {
    function openChest(address _owner, uint256 _tokenId)
        external
        returns (PKChest memory);

    function buyChest(
        address buyer,
        string memory _tokenURI,
        string memory _data,
        uint8 _cType
    ) external returns (uint256);
}


contract PiratesKingGame is Context, Ownable, IPiratesKingBase
{

    struct IsLandChoseStruct {
        string  date;
        string  isLandName;
        uint256 amount;
    }


    struct TransactionInfo {
        uint256 amount;
        uint256 timestamp;
        string t_type;
        address wallet;
    }

    using SafeMath for uint256;
    address public pktContract;
    address payable public findTreasureIslandPool;
    address payable public rewardPool;
    address payable public devPool;
    address public chestContract;
    uint256 private baseCost;
    uint256 private baseCostChestVip;
    uint256 private baseCostItemChest;

    // Contract status
    bool public active;
    mapping (address => IsLandChoseStruct[]) public islandsChose;
    mapping (string => TransactionInfo) private _transInfo;

    uint256 public buyChestRewardPercent = 70;
    uint256 public treasureIslandRewardPercent = 2;
    uint256 public treasureIslandDevPercent = 8;

    /*
    *	@dev Check if contract is active
	*/
    modifier isContractActive {
        require( active, "Contract is inactive" );
        _;
    }


    /*
    * @dev Log contract status update
  */
    event ContractStatusUpdate(bool newStatus);
    event LibContractAddressUpdate(address newAddress, bytes32 contractName);
    event NewIsLandChose(address indexed player, string name, uint256 amount, string date);
    event NewLevelUpgrade(address indexed player, string id_level, uint256 amount, string id_pirate);
    event NewChestPurchased(address indexed player, uint256 chest_id, uint256 amount);
    event GiveChestToContestWinner(address indexed player, uint256 chest_id);

    /*
    * @dev Set default admin role to owner
  */

    constructor(
    ) {
        findTreasureIslandPool = payable(0x6D5527D0c4494Dd9D8a2Fad80FF7872558eD9FdC);
        rewardPool = payable(0x6D5527D0c4494Dd9D8a2Fad80FF7872558eD9FdC);
        devPool = payable(0x9B5b98D20042c29293289Fea8324ef1584e9c78E);
        pktContract = payable(0x4cbd8ADCD7eCa7D1B71ADbBF484F1e8014681a9D);
        chestContract = payable(0x9B2f05e4c4cE1798450DB0Db99cec46E130d6c90);
        baseCost = 1500*10**18;
        baseCostChestVip = 2000*10**18;
        baseCostItemChest = 1000*10**18;
        active = true;
    }

    /*
    *  @Update weapon contract address
  */
    function setFindTreasureIslandPoolAddress(address _address)
    external
    onlyOwner
    {
        require(findTreasureIslandPool != _address, 'This address was already used');
        findTreasureIslandPool = payable(_address);
        emit LibContractAddressUpdate(_address, 'findTreasureIsland');
    }

    function setRewardPoolAddress(address _address)
    external
    onlyOwner
    {
        require(rewardPool != _address, 'This address was already used');
        rewardPool = payable(_address);
        emit LibContractAddressUpdate(_address, 'rewardPool');
    }

    function setDevPoolAddress(address _address)
    external
    onlyOwner
    {
        require(devPool != _address, 'This address was already used');
        devPool = payable(_address);
        emit LibContractAddressUpdate(_address, 'devPool');
    }

    /*
    *  @Update token contract address
  */
    function setPKTContractAddress(address _contract)
    external
    onlyOwner
    {
        require(pktContract != _contract, 'This contract was already used');
        pktContract = _contract;
        emit LibContractAddressUpdate(_contract, 'pkt');
    }

    function setChestContractAddress(address _contract)
    external
    onlyOwner
    {
        require(chestContract != _contract, 'This contract was already used');
        chestContract = _contract;
        emit LibContractAddressUpdate(_contract, 'chest');
    }

    function setBuyChestRewardPercent(uint256 percent) external onlyOwner {
        require(buyChestRewardPercent != percent);
        buyChestRewardPercent = percent;
    }

    function setTreasureIslandRewardPercent(uint256 percent) external onlyOwner {
        require(treasureIslandRewardPercent != percent);
        treasureIslandRewardPercent = percent;
    }

    function setTreasureIslandDevPercent(uint256 percent) external onlyOwner {
        require(treasureIslandDevPercent != percent);
        treasureIslandDevPercent = percent;
    }


    function setBaseCost(uint256 _cost) external onlyOwner {
        require(_cost > 0, "cost must be > 0");
        baseCost = _cost;
    }

    function getBaseCost() public view onlyOwner returns (uint256) {
        return baseCost;
    }

    function setBaseCostChestVip(uint256 _cost) external onlyOwner {
        require(_cost > 0, "cost must be > 0");
        baseCostChestVip = _cost;
    }

    function getBaseCostChestVip() public view onlyOwner returns (uint256) {
        return baseCostChestVip;
    }

    function setBaseCostItemChest(uint256 _cost) external onlyOwner {
        require(_cost > 0, "cost must be > 0");
        baseCostItemChest = _cost;
    }

    function getBaseCostItemChest() public view onlyOwner returns (uint256) {
        return baseCostItemChest;
    }


    function activateDeactivateContract(bool _active)
    external
    onlyOwner
    {
        active = _active;
        emit ContractStatusUpdate(_active);
    }

    function playerChooseIsland(string memory  _islandName, uint256 _amount, string memory _date, string memory trans_id)
    external
    payable
    {
        uint256 devAmount = treasureIslandDevPercent.mul(_amount).div(100);
        uint256 rwAmount = treasureIslandRewardPercent.mul(_amount).div(100);
        uint256 treasureIslandAmount = _amount.sub(devAmount).sub(rwAmount);
        require(IBEP20(pktContract).transferFrom(
                _msgSender(),
                rewardPool, rwAmount
            ), "Deposit failed");

        require(IBEP20(pktContract).transferFrom(
                _msgSender(),
                devPool, devAmount
            ), "Deposit failed");

        require(IBEP20(pktContract).transferFrom(
            _msgSender(),
            findTreasureIslandPool, treasureIslandAmount
        ), "Deposit failed");


        TransactionInfo memory trans ;
        trans.amount = _amount;
        trans.timestamp = block.timestamp;
        trans.t_type = "Treasure_Island";
        trans.wallet = _msgSender();
        _transInfo[trans_id] = trans;


        emit NewIsLandChose(_msgSender(), _islandName, _amount, _date);
    }

    function playerUpgradeLevel(string memory  _idPirate, uint256 _amount, string memory _idLevel, string memory trans_id)
    external
    payable
    {
        require(IBEP20(pktContract).transferFrom(
                _msgSender(),
                devPool,
                _amount
            ), "Deposit failed");

        TransactionInfo memory trans ;
        trans.amount = _amount;
        trans.timestamp = block.timestamp;
        trans.t_type = "Upgrade_Level";
        trans.wallet = _msgSender();
        _transInfo[trans_id] = trans;

        emit NewLevelUpgrade(_msgSender(), _idLevel, _amount, _idPirate);
    }

    function buyChest(
        string memory _tokenURI,
        uint256 _price,
        string memory _data,
        uint8 _cType,
        string memory trans_id
    ) external payable returns (uint256) {
        if (_cType == 1) {
            require(_price >= baseCost, "_price must be > baseCost");
        } else if (_cType == 2) {
            require(_price >= baseCostChestVip, "_price must be > baseCost");
        } else if (_cType == 3) {
            require(_price >= baseCostItemChest, "_price must be > baseCost");
        }
        uint256 rwAmount = buyChestRewardPercent.mul(_price).div(100);
        uint256 devAmount = _price.sub(rwAmount);
        if (IBEP20(pktContract).transferFrom(_msgSender(), rewardPool, rwAmount) && IBEP20(pktContract).transferFrom(_msgSender(), devPool, devAmount))
        {
            IPiratesKingChest ChestContract = IPiratesKingChest(chestContract);
            uint256 chest_id = ChestContract.buyChest(_msgSender(),_tokenURI, _data, _cType);
            TransactionInfo memory trans ;
            trans.amount = _price;
            trans.timestamp = block.timestamp;

            if (_cType == 1) {
                trans.t_type = "Buy_Chest";
            } else if (_cType == 2) {
                trans.t_type = "Buy_Chest_Vip";
            }else if (_cType == 3) {
                trans.t_type = "Buy_Chest_Item";
            }
            trans.wallet = _msgSender();
            _transInfo[trans_id] = trans;
            emit NewChestPurchased(_msgSender(), chest_id, _price);
            return chest_id;
        } else {
            revert("Error transferring tokens");
        }

    }

    function giveChestToContestWinner(
        address winner,
        string memory _tokenURI,
        string memory _data,
        uint8 _cType
    ) external onlyOwner returns (uint256)
    {
        IPiratesKingChest ChestContract = IPiratesKingChest(chestContract);
        uint256 chest_id = ChestContract.buyChest(winner,_tokenURI, _data, _cType);
        emit GiveChestToContestWinner(winner, chest_id);
        return chest_id;
    }

    function transactionInfoOf(string memory trans_id) public view  returns (TransactionInfo memory) {
        return _transInfo[trans_id];
    }

}
